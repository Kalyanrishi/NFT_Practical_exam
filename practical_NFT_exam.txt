1) Write a Solidity Smart Contract for a Non-Fungible Token (NFT) which can able to perform Identity Verification and Authentication as they can contain
       unique information about an individual that is Cryptographically secure?
Ans) // SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "openZeplin/contracts/token/ERC721/ERC721.sol";
import "openZeplin/contracts/contracts/access/Ownable.sol";
import "openZeplin/contracts/contracts/utlis/Counters.sol";

contract NFTIdentityToken is ERC721, Ownable {
    using Counters for Counters.Counters;
    Coumters.Counters private _tokenIdCounter;
    mapping(address => bool) _verified;
    constructor() ERC721("NFT Identity TOken", "NFTIT") {

    }
    function verify(address _address) external onlyOwner {
          _verified[_address] = true;
    }
    function revoke(address _address) external onlyOwner {
        _verified[_address] = false;
    }
    function checkVerifiedOrNot(address _address) external view returns (bool) {
        return _verified[_addr];
    }

    function safeMint(address to) public onlyOwner {
        _tokenIdCounter.increment();
        uint256 tokenId = _tokenIdCounter.current();

        require(!_exists(tokenId));

        _safeMint(to, tokenId);

    }
    function _beforeTokenTranfer(adress from, address to, uint256 tokenId,
    uint256 batchSize) internal override(ERC721) {
        super._beforeTokenTransfer(from, to, tokenId, batchSize);
    }
    // for Transferring
    if(from != address(0) && to != address(0)) {
        require(_verified[from], " 'from' is not a verified address");
        require(_verified[to], " 'to' is not a verified address");
    }

    // for Minting
    else if(fron == address(0) && to != address(0)) {
        require(_verified[to], " 'to' is not a verified address");
    }
}